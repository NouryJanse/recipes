generator client {
  provider = "prisma-client-js"
}

// MIGRATION ENV VARS
// ENV VAR FOR DEV: DB_URL
// ENV VAR FOR TEST: TEST_DB_URL

datasource db {
  provider          = "postgresql"
  url               = env("LOCAL_URL")
  shadowDatabaseUrl = env("SHADOW_LOCAL_URL")
}

model Recipe {
  id               Int                @unique @default(autoincrement())
  name             String             @unique @db.VarChar(255)
  description      String?            @db.VarChar(2000)
  createdAt        DateTime?          @default(now())
  updatedAt        DateTime?          @updatedAt
  published        Boolean?           @default(false)
  authorId         Int?
  author           User?              @relation(fields: [authorId], references: [id])
  course           String             @db.VarChar(500)
  cookingDuration  Int?
  rating           Int?
  difficultyRating Int?
  calorieCount     Int?
  Image            Image[]
  RecipeIngredient RecipeIngredient[]
}

model Image {
  id                 Int     @unique @default(autoincrement())
  url                String  @unique @db.VarChar(500)
  width              Int?
  height             Int?
  position           Int?
  recipeId           Int?
  cloudinaryPublicId String  @unique @db.VarChar(255)
  recipe             Recipe? @relation(fields: [recipeId], references: [id])
}

model User {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String?
  recipes Recipe[]
  // profile Profile?
}

model Ingredient {
  id               Int                @unique @default(autoincrement())
  name             String             @unique @db.VarChar(255)
  createdAt        DateTime?          @default(now())
  updatedAt        DateTime?          @updatedAt
  published        Boolean?           @default(false)
  calorieCount     Int?
  unit             String?            @db.VarChar(255)
  RecipeIngredient RecipeIngredient[]
}

model RecipeIngredient {
  id           Int        @unique @default(autoincrement())
  recipe       Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  recipeId     Int // relation scalar field (used in the `@relation` attribute above)
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ingredientId Int // relation scalar field (used in the `@relation` attribute above)
  addedAt      DateTime   @default(now())
  unit         String?    @db.VarChar(255)
  description  String?    @db.VarChar(255)
  amount       Int
}
